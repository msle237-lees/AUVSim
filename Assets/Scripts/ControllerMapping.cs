//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControllerMapping: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControllerMapping()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""LX"",
            ""id"": ""252261d0-6eec-42bc-80a9-06887748c229"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a8524c2a-5fbb-4b2b-8821-1fb5ddebc16e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5807c138-7122-41f1-94d9-7c00725b431f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""89125ab4-ad27-450b-ae4f-c27db813f7f6"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e238c8ab-1fec-4ee2-8035-9cb1a39262ec"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""LY"",
            ""id"": ""7a4e0b66-2487-48e5-abe8-d1ea9c388d12"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""40d90c55-526d-46d9-a8b2-b451304874b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6013f1fe-aa3c-42a0-af54-ed038f18c9ac"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e9b4cc47-9a2e-4400-b390-c46fda51f33b"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""379ce4bd-d256-49a0-9b00-0c2baffef7a4"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""RX"",
            ""id"": ""eb14eb66-4b8d-4957-95e0-840f4876b924"",
            ""actions"": [
                {
                    ""name"": ""New action1"",
                    ""type"": ""Button"",
                    ""id"": ""3defb47c-7a46-41b3-bd7b-04ff23fc4cf0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8fe3856b-fb84-4ba0-864e-03e98d096c81"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""76fe2272-1718-45c0-bf23-032df2c1857a"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""671990a7-ac41-4753-8aa4-50cf57406030"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""RY"",
            ""id"": ""ffed7141-614c-4887-a56a-275759f53cc9"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""e9330986-1c09-4b7f-93d1-7afa2e29c8a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""89c315b6-4bee-4c9a-ba35-f048258b18f7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""20cdc3f9-b222-4402-b48f-40fcaab69513"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4df9b70c-c2c8-481f-b00f-ff2bca1498c8"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""A"",
            ""id"": ""8fcb56ae-5a3d-4f6f-bfe3-59a5f844959e"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""9a4b5485-e7a1-4d41-8e29-07029a23843b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07575266-147d-44f9-adfe-a6547fdd300e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""X"",
            ""id"": ""9155b3eb-1de9-45d7-9a89-a8e4cdfb5598"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""31631df4-5a9a-463a-94e6-03a99e06e623"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c09a80e-d69f-4dcc-a1e4-4e7911a89850"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Y"",
            ""id"": ""75b95b8a-11d4-4b23-90f3-2116cbb27982"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""25202575-666a-4245-8bd7-5ccd05ed6cb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""63812cc9-96f1-481d-95c5-d26ba632d1ad"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""B"",
            ""id"": ""7103d1c2-3e07-492c-8f1f-daadc678d6e8"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""bbedf360-73be-4ae4-8fff-6bd65d8d8e69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5790b9a3-0252-4347-b69c-a73a6019e5b1"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DPadD"",
            ""id"": ""b1e6900f-57d9-4d67-9309-9ec798c07c32"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""9246d8fb-7590-40ec-a05e-3606170c07c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ef12ead-7b05-43a8-b640-e53333892acc"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DPadU"",
            ""id"": ""373a1d7d-ea24-405c-9524-2e040bf96dae"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Value"",
                    ""id"": ""8322a348-6920-45c7-aa0b-7ac5150810ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ee9f6bc-8d3b-4b81-b4a7-7496a624adb1"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DPadR"",
            ""id"": ""f1c9d498-da06-4abd-af3f-fca3a0197b03"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""5645df34-077e-4127-8dc1-a631b69ed3fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""76a60f2f-20e2-480e-ac83-b5e08382bc6f"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DPadL"",
            ""id"": ""e0af21dd-f977-432d-a8c4-7fa797e5796b"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""1f5f2e96-af43-4fc8-b739-58a226af266b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""694ee6eb-ec81-4f57-8682-6a03b6983d77"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TriggerR"",
            ""id"": ""32563c99-3390-4800-b0bf-839a61c02bcd"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""9229d02f-aa4c-46f8-b4fc-38ee17177080"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f6aa88f2-92c5-450e-81f9-055af1fde60b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TriggerL"",
            ""id"": ""dd8cfdbc-e786-4f1f-a1e6-79bdeb209fb3"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""aae78a92-a552-4123-b1d2-50485843b04c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79f01589-ffed-4985-903d-86a4fcea2637"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BumperR"",
            ""id"": ""4df04f2b-ff3f-4e67-891a-fecd319d3800"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""0d84086a-784a-48c7-b37e-9fc19842375a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""01ec70fc-0bce-4bd6-8727-577efe5741a9"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BumperL"",
            ""id"": ""e109fa77-d17d-4149-92f3-8e3572c850b3"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""ab249e8b-f2af-46dd-9ba0-e9bb6d698c39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b2af4bd6-1a84-42a6-9344-1b03891510cc"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XboxController"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""XboxController"",
            ""bindingGroup"": ""XboxController"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // LX
        m_LX = asset.FindActionMap("LX", throwIfNotFound: true);
        m_LX_Newaction = m_LX.FindAction("New action", throwIfNotFound: true);
        // LY
        m_LY = asset.FindActionMap("LY", throwIfNotFound: true);
        m_LY_Newaction = m_LY.FindAction("New action", throwIfNotFound: true);
        // RX
        m_RX = asset.FindActionMap("RX", throwIfNotFound: true);
        m_RX_Newaction1 = m_RX.FindAction("New action1", throwIfNotFound: true);
        // RY
        m_RY = asset.FindActionMap("RY", throwIfNotFound: true);
        m_RY_Newaction = m_RY.FindAction("New action", throwIfNotFound: true);
        // A
        m_A = asset.FindActionMap("A", throwIfNotFound: true);
        m_A_Newaction = m_A.FindAction("New action", throwIfNotFound: true);
        // X
        m_X = asset.FindActionMap("X", throwIfNotFound: true);
        m_X_Newaction = m_X.FindAction("New action", throwIfNotFound: true);
        // Y
        m_Y = asset.FindActionMap("Y", throwIfNotFound: true);
        m_Y_Newaction = m_Y.FindAction("New action", throwIfNotFound: true);
        // B
        m_B = asset.FindActionMap("B", throwIfNotFound: true);
        m_B_Newaction = m_B.FindAction("New action", throwIfNotFound: true);
        // DPadD
        m_DPadD = asset.FindActionMap("DPadD", throwIfNotFound: true);
        m_DPadD_Newaction = m_DPadD.FindAction("New action", throwIfNotFound: true);
        // DPadU
        m_DPadU = asset.FindActionMap("DPadU", throwIfNotFound: true);
        m_DPadU_Newaction = m_DPadU.FindAction("New action", throwIfNotFound: true);
        // DPadR
        m_DPadR = asset.FindActionMap("DPadR", throwIfNotFound: true);
        m_DPadR_Newaction = m_DPadR.FindAction("New action", throwIfNotFound: true);
        // DPadL
        m_DPadL = asset.FindActionMap("DPadL", throwIfNotFound: true);
        m_DPadL_Newaction = m_DPadL.FindAction("New action", throwIfNotFound: true);
        // TriggerR
        m_TriggerR = asset.FindActionMap("TriggerR", throwIfNotFound: true);
        m_TriggerR_Newaction = m_TriggerR.FindAction("New action", throwIfNotFound: true);
        // TriggerL
        m_TriggerL = asset.FindActionMap("TriggerL", throwIfNotFound: true);
        m_TriggerL_Newaction = m_TriggerL.FindAction("New action", throwIfNotFound: true);
        // BumperR
        m_BumperR = asset.FindActionMap("BumperR", throwIfNotFound: true);
        m_BumperR_Newaction = m_BumperR.FindAction("New action", throwIfNotFound: true);
        // BumperL
        m_BumperL = asset.FindActionMap("BumperL", throwIfNotFound: true);
        m_BumperL_Newaction = m_BumperL.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LX
    private readonly InputActionMap m_LX;
    private List<ILXActions> m_LXActionsCallbackInterfaces = new List<ILXActions>();
    private readonly InputAction m_LX_Newaction;
    public struct LXActions
    {
        private @ControllerMapping m_Wrapper;
        public LXActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_LX_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_LX; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LXActions set) { return set.Get(); }
        public void AddCallbacks(ILXActions instance)
        {
            if (instance == null || m_Wrapper.m_LXActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LXActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ILXActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ILXActions instance)
        {
            if (m_Wrapper.m_LXActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILXActions instance)
        {
            foreach (var item in m_Wrapper.m_LXActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LXActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LXActions @LX => new LXActions(this);

    // LY
    private readonly InputActionMap m_LY;
    private List<ILYActions> m_LYActionsCallbackInterfaces = new List<ILYActions>();
    private readonly InputAction m_LY_Newaction;
    public struct LYActions
    {
        private @ControllerMapping m_Wrapper;
        public LYActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_LY_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_LY; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LYActions set) { return set.Get(); }
        public void AddCallbacks(ILYActions instance)
        {
            if (instance == null || m_Wrapper.m_LYActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LYActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ILYActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ILYActions instance)
        {
            if (m_Wrapper.m_LYActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILYActions instance)
        {
            foreach (var item in m_Wrapper.m_LYActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LYActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LYActions @LY => new LYActions(this);

    // RX
    private readonly InputActionMap m_RX;
    private List<IRXActions> m_RXActionsCallbackInterfaces = new List<IRXActions>();
    private readonly InputAction m_RX_Newaction1;
    public struct RXActions
    {
        private @ControllerMapping m_Wrapper;
        public RXActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction1 => m_Wrapper.m_RX_Newaction1;
        public InputActionMap Get() { return m_Wrapper.m_RX; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RXActions set) { return set.Get(); }
        public void AddCallbacks(IRXActions instance)
        {
            if (instance == null || m_Wrapper.m_RXActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RXActionsCallbackInterfaces.Add(instance);
            @Newaction1.started += instance.OnNewaction1;
            @Newaction1.performed += instance.OnNewaction1;
            @Newaction1.canceled += instance.OnNewaction1;
        }

        private void UnregisterCallbacks(IRXActions instance)
        {
            @Newaction1.started -= instance.OnNewaction1;
            @Newaction1.performed -= instance.OnNewaction1;
            @Newaction1.canceled -= instance.OnNewaction1;
        }

        public void RemoveCallbacks(IRXActions instance)
        {
            if (m_Wrapper.m_RXActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRXActions instance)
        {
            foreach (var item in m_Wrapper.m_RXActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RXActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RXActions @RX => new RXActions(this);

    // RY
    private readonly InputActionMap m_RY;
    private List<IRYActions> m_RYActionsCallbackInterfaces = new List<IRYActions>();
    private readonly InputAction m_RY_Newaction;
    public struct RYActions
    {
        private @ControllerMapping m_Wrapper;
        public RYActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_RY_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_RY; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RYActions set) { return set.Get(); }
        public void AddCallbacks(IRYActions instance)
        {
            if (instance == null || m_Wrapper.m_RYActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RYActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IRYActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IRYActions instance)
        {
            if (m_Wrapper.m_RYActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRYActions instance)
        {
            foreach (var item in m_Wrapper.m_RYActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RYActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RYActions @RY => new RYActions(this);

    // A
    private readonly InputActionMap m_A;
    private List<IAActions> m_AActionsCallbackInterfaces = new List<IAActions>();
    private readonly InputAction m_A_Newaction;
    public struct AActions
    {
        private @ControllerMapping m_Wrapper;
        public AActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_A_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_A; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AActions set) { return set.Get(); }
        public void AddCallbacks(IAActions instance)
        {
            if (instance == null || m_Wrapper.m_AActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IAActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IAActions instance)
        {
            if (m_Wrapper.m_AActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAActions instance)
        {
            foreach (var item in m_Wrapper.m_AActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AActions @A => new AActions(this);

    // X
    private readonly InputActionMap m_X;
    private List<IXActions> m_XActionsCallbackInterfaces = new List<IXActions>();
    private readonly InputAction m_X_Newaction;
    public struct XActions
    {
        private @ControllerMapping m_Wrapper;
        public XActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_X_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_X; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XActions set) { return set.Get(); }
        public void AddCallbacks(IXActions instance)
        {
            if (instance == null || m_Wrapper.m_XActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IXActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IXActions instance)
        {
            if (m_Wrapper.m_XActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXActions instance)
        {
            foreach (var item in m_Wrapper.m_XActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XActions @X => new XActions(this);

    // Y
    private readonly InputActionMap m_Y;
    private List<IYActions> m_YActionsCallbackInterfaces = new List<IYActions>();
    private readonly InputAction m_Y_Newaction;
    public struct YActions
    {
        private @ControllerMapping m_Wrapper;
        public YActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Y_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Y; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(YActions set) { return set.Get(); }
        public void AddCallbacks(IYActions instance)
        {
            if (instance == null || m_Wrapper.m_YActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_YActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IYActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IYActions instance)
        {
            if (m_Wrapper.m_YActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IYActions instance)
        {
            foreach (var item in m_Wrapper.m_YActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_YActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public YActions @Y => new YActions(this);

    // B
    private readonly InputActionMap m_B;
    private List<IBActions> m_BActionsCallbackInterfaces = new List<IBActions>();
    private readonly InputAction m_B_Newaction;
    public struct BActions
    {
        private @ControllerMapping m_Wrapper;
        public BActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_B_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_B; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BActions set) { return set.Get(); }
        public void AddCallbacks(IBActions instance)
        {
            if (instance == null || m_Wrapper.m_BActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IBActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IBActions instance)
        {
            if (m_Wrapper.m_BActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBActions instance)
        {
            foreach (var item in m_Wrapper.m_BActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BActions @B => new BActions(this);

    // DPadD
    private readonly InputActionMap m_DPadD;
    private List<IDPadDActions> m_DPadDActionsCallbackInterfaces = new List<IDPadDActions>();
    private readonly InputAction m_DPadD_Newaction;
    public struct DPadDActions
    {
        private @ControllerMapping m_Wrapper;
        public DPadDActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_DPadD_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_DPadD; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DPadDActions set) { return set.Get(); }
        public void AddCallbacks(IDPadDActions instance)
        {
            if (instance == null || m_Wrapper.m_DPadDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DPadDActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IDPadDActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IDPadDActions instance)
        {
            if (m_Wrapper.m_DPadDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDPadDActions instance)
        {
            foreach (var item in m_Wrapper.m_DPadDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DPadDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DPadDActions @DPadD => new DPadDActions(this);

    // DPadU
    private readonly InputActionMap m_DPadU;
    private List<IDPadUActions> m_DPadUActionsCallbackInterfaces = new List<IDPadUActions>();
    private readonly InputAction m_DPadU_Newaction;
    public struct DPadUActions
    {
        private @ControllerMapping m_Wrapper;
        public DPadUActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_DPadU_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_DPadU; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DPadUActions set) { return set.Get(); }
        public void AddCallbacks(IDPadUActions instance)
        {
            if (instance == null || m_Wrapper.m_DPadUActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DPadUActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IDPadUActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IDPadUActions instance)
        {
            if (m_Wrapper.m_DPadUActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDPadUActions instance)
        {
            foreach (var item in m_Wrapper.m_DPadUActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DPadUActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DPadUActions @DPadU => new DPadUActions(this);

    // DPadR
    private readonly InputActionMap m_DPadR;
    private List<IDPadRActions> m_DPadRActionsCallbackInterfaces = new List<IDPadRActions>();
    private readonly InputAction m_DPadR_Newaction;
    public struct DPadRActions
    {
        private @ControllerMapping m_Wrapper;
        public DPadRActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_DPadR_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_DPadR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DPadRActions set) { return set.Get(); }
        public void AddCallbacks(IDPadRActions instance)
        {
            if (instance == null || m_Wrapper.m_DPadRActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DPadRActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IDPadRActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IDPadRActions instance)
        {
            if (m_Wrapper.m_DPadRActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDPadRActions instance)
        {
            foreach (var item in m_Wrapper.m_DPadRActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DPadRActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DPadRActions @DPadR => new DPadRActions(this);

    // DPadL
    private readonly InputActionMap m_DPadL;
    private List<IDPadLActions> m_DPadLActionsCallbackInterfaces = new List<IDPadLActions>();
    private readonly InputAction m_DPadL_Newaction;
    public struct DPadLActions
    {
        private @ControllerMapping m_Wrapper;
        public DPadLActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_DPadL_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_DPadL; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DPadLActions set) { return set.Get(); }
        public void AddCallbacks(IDPadLActions instance)
        {
            if (instance == null || m_Wrapper.m_DPadLActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DPadLActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IDPadLActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IDPadLActions instance)
        {
            if (m_Wrapper.m_DPadLActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDPadLActions instance)
        {
            foreach (var item in m_Wrapper.m_DPadLActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DPadLActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DPadLActions @DPadL => new DPadLActions(this);

    // TriggerR
    private readonly InputActionMap m_TriggerR;
    private List<ITriggerRActions> m_TriggerRActionsCallbackInterfaces = new List<ITriggerRActions>();
    private readonly InputAction m_TriggerR_Newaction;
    public struct TriggerRActions
    {
        private @ControllerMapping m_Wrapper;
        public TriggerRActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_TriggerR_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_TriggerR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TriggerRActions set) { return set.Get(); }
        public void AddCallbacks(ITriggerRActions instance)
        {
            if (instance == null || m_Wrapper.m_TriggerRActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TriggerRActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ITriggerRActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ITriggerRActions instance)
        {
            if (m_Wrapper.m_TriggerRActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITriggerRActions instance)
        {
            foreach (var item in m_Wrapper.m_TriggerRActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TriggerRActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TriggerRActions @TriggerR => new TriggerRActions(this);

    // TriggerL
    private readonly InputActionMap m_TriggerL;
    private List<ITriggerLActions> m_TriggerLActionsCallbackInterfaces = new List<ITriggerLActions>();
    private readonly InputAction m_TriggerL_Newaction;
    public struct TriggerLActions
    {
        private @ControllerMapping m_Wrapper;
        public TriggerLActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_TriggerL_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_TriggerL; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TriggerLActions set) { return set.Get(); }
        public void AddCallbacks(ITriggerLActions instance)
        {
            if (instance == null || m_Wrapper.m_TriggerLActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TriggerLActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ITriggerLActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ITriggerLActions instance)
        {
            if (m_Wrapper.m_TriggerLActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITriggerLActions instance)
        {
            foreach (var item in m_Wrapper.m_TriggerLActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TriggerLActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TriggerLActions @TriggerL => new TriggerLActions(this);

    // BumperR
    private readonly InputActionMap m_BumperR;
    private List<IBumperRActions> m_BumperRActionsCallbackInterfaces = new List<IBumperRActions>();
    private readonly InputAction m_BumperR_Newaction;
    public struct BumperRActions
    {
        private @ControllerMapping m_Wrapper;
        public BumperRActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_BumperR_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_BumperR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BumperRActions set) { return set.Get(); }
        public void AddCallbacks(IBumperRActions instance)
        {
            if (instance == null || m_Wrapper.m_BumperRActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BumperRActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IBumperRActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IBumperRActions instance)
        {
            if (m_Wrapper.m_BumperRActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBumperRActions instance)
        {
            foreach (var item in m_Wrapper.m_BumperRActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BumperRActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BumperRActions @BumperR => new BumperRActions(this);

    // BumperL
    private readonly InputActionMap m_BumperL;
    private List<IBumperLActions> m_BumperLActionsCallbackInterfaces = new List<IBumperLActions>();
    private readonly InputAction m_BumperL_Newaction;
    public struct BumperLActions
    {
        private @ControllerMapping m_Wrapper;
        public BumperLActions(@ControllerMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_BumperL_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_BumperL; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BumperLActions set) { return set.Get(); }
        public void AddCallbacks(IBumperLActions instance)
        {
            if (instance == null || m_Wrapper.m_BumperLActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BumperLActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IBumperLActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IBumperLActions instance)
        {
            if (m_Wrapper.m_BumperLActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBumperLActions instance)
        {
            foreach (var item in m_Wrapper.m_BumperLActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BumperLActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BumperLActions @BumperL => new BumperLActions(this);
    private int m_XboxControllerSchemeIndex = -1;
    public InputControlScheme XboxControllerScheme
    {
        get
        {
            if (m_XboxControllerSchemeIndex == -1) m_XboxControllerSchemeIndex = asset.FindControlSchemeIndex("XboxController");
            return asset.controlSchemes[m_XboxControllerSchemeIndex];
        }
    }
    public interface ILXActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface ILYActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IRXActions
    {
        void OnNewaction1(InputAction.CallbackContext context);
    }
    public interface IRYActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IAActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IXActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IYActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IBActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IDPadDActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IDPadUActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IDPadRActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IDPadLActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface ITriggerRActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface ITriggerLActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IBumperRActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IBumperLActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
